
--------------------------------------------------------------------------------
 - addExtraSimulatorsPaths/getExtraSimulatorsPaths/resetExtraSimulatorsPaths
>>> obj = PyOpenFLUID()
>>> obj.addExtraSimulatorsPaths("/first/path/to/add")
>>> print obj.getExtraSimulatorsPaths()
["/first/path/to/add"]
>>> obj.addExtraSimulatorsPaths("/second/path/to/add:/third/path/to/add")
>>> print obj.getExtraSimulatorsPaths()
["/second/path/to/add:/third/path/to/add:/first/path/to/add"]
>>> obj.resetExtraSimulatorsPaths()
>>> assert len(obj.getExtraSimulatorsPaths()) == 0


--------------------------------------------------------------------------------
 - addExtraObserversPaths/getExtraObserversPaths/resetExtraObserversPaths
>>> obj = PyOpenFLUID()
>>> obj.addExtraObserversPaths("/first/path/to/add")
>>> print obj.getExtraObserversPaths()
["/first/path/to/add"]
>>> obj.addExtraObserversPaths("/second/path/to/add:/third/path/to/add")
>>> print obj.getExtraObserversPaths()
["/second/path/to/add:/third/path/to/add:/first/path/to/add"]
>>> obj.resetExtraObserversPaths()
>>> assert len(obj.getExtraObserversPaths()) == 0


--------------------------------------------------------------------------------
 - getDefaultDeltaT/setDefaultDeltaT
>>> obj = PyOpenFLUID()
>>> obj.setDefaultDeltaT(60)
>>> assert obj.getDefaultDeltaT() == 60


--------------------------------------------------------------------------------
 - getPeriodBeginDate/setPeriodBeginDate
>>> obj = PyOpenFLUID()
>>> obj.setPeriodBeginDate("1997-06-05 04:00:00")
>>> assert obj.getPeriodBeginDate() == "1997-06-05 04:00:00"


--------------------------------------------------------------------------------
 - getPeriodEndDate/setPeriodEndDate
>>> obj = PyOpenFLUID()
>>> obj.setPeriodEndDate("1997-06-05 04:00:00")
>>> assert obj.getPeriodEndDate() = "1997-06-05 04:00:00"


--------------------------------------------------------------------------------
 - runProject
>>> obj = PyOpenFLUID()
>>> obj.runProject("/path/to/dataset")


--------------------------------------------------------------------------------
 - runSimulation
>>> obj = PyOpenFLUID()
>>> ... # open a project or configure the simulation
>>> res = obj.runSimulation()
>>> assert isinstance(res, bool)


--------------------------------------------------------------------------------
 - __str__
>>> obj = PyOpenFLUID()
>>> v = str(obj)
>>> print obj


--------------------------------------------------------------------------------
 - getVersion
>>> obj = PyOpenFLUID()
>>> v = obj.getVersion()


--------------------------------------------------------------------------------
 - printSimulationInfo
>>> obj = PyOpenFLUID()
>>> ... # open a project or configure the simulation
>>> obj.printSimulationInfo()
Spatial domain is made of ....


--------------------------------------------------------------------------------
 - addSimulator/removeSimulator/clearModel/getSimulatorsInModel
>>> obj = PyOpenFLUID()
>>> assert len(obj.getSimulatorsInModel()) == 0
>>> obj.addSimulator("firstSim")
>>> assert obj.getSimulatorsInModel() == ["firstSim"]
>>> obj.addSimulator("secSim")
>>> assert obj.getSimulatorsInModel() == ["firstSim", "secSim"]
>>> obj.removeSimulator("firstSim")
>>> assert obj.getSimulatorsInModel() == ["secSim"]
>>> obj.clearModel()
>>> assert len(obj.getSimulatorsInModel()) == 0


--------------------------------------------------------------------------------
 - addObserver/removeObserver/clearMonitoring/getObserversInMonitoring
>>> obj = PyOpenFLUID()
>>> assert len(obj.getObserversInMonitoring()) == 0
>>> obj.addObserver("export.test.firstObs")
>>> assert obj.getObserversInMonitoring() == ["export.test.firstObs"]
>>> obj.addObserver("export.test2.secObs")
>>> assert obj.getObserversInMonitoring() == ["export.test.firstObs", "export.test2.secObs"]
>>> obj.removeObserver("export.test.firstObs")
>>> assert obj.getObserversInMonitoring() == ["export.test2.secObs"]
>>> obj.clearMonitoring()
>>> assert len(obj.getObserversInMonitoring() == 0


--------------------------------------------------------------------------------
 - getSimulatorParam/setSimulatorParam/removeSimulatorParam/getSimulatorParams
>>> obj = PyOpenFLUID()
>>> obj.addSimulator("my.simulator")
>>> assert len(obj.getSimulatorParams("my.simulator")) == 0
>>> obj.setSimulatorParam("my.simulator","coeff","3")
>>> assert obj.getSimulatorParam("my_simulator", "coeff") == "3"
>>> assert obj.getSimulatorParams("my.simulator") == ["coeff"]
>>> obj.setSimulatorParam("my.simulator","tolerance","0.2")
>>> assert obj.getSimulatorParams("my.simulator") == ["coeff", "tolerance"]
>>> obj.removeSimulatorParam("my.simulator", "coeff")
>>> assert obj.getSimulatorParams("my.simulator") == ["tolerance"]


--------------------------------------------------------------------------------
 - getGeneratorParam/setGeneratorParam
>>> obj = PyOpenFLUID()
>>> obj.addUnit("SU", 1, 1)
>>> # obj.addGenerator("SU", "var")
>>> obj.setGeneratorParam("SU","var.flux","fixedvalue","12.3")
>>> assert obj.getGeneratorParam("SU","var.flux","fixedvalue") == "12.3"


--------------------------------------------------------------------------------
 - getModelGlobalParam/setModelGlobalParam/removeModelGlobalParam/getModelGlobalParams
>>> obj = PyOpenFLUID()
>>> assert len(obj.getModelGlobalParams()) == 0
>>> obj.setModelGlobalParam("gvalue","37.2")
>>> assert obj.getModelGlobalParam("gvalue") == "37.2"
>>> assert obj.getModelGlobalParams() == ["gvalue"]
>>> obj.setModelGlobalParam("bluesky","YES")
>>> assert obj.getModelGlobalParams() == ["gvalue", "bluesky"]
>>> obj.removeModelGlobalParam("gvalue")
>>> assert obj.getModelGlobalParams() == ["bluesky"]


--------------------------------------------------------------------------------
 - getObserverParam/setObserverParam/removeObserverParam/getObserverParams
>>> obj = PyOpenFLUID()
>>> obj.addObserver("export.test.fake")
>>> assert len(obj.getObserverParams("export.test.fake")) == 0
>>> obj.setObserverParam("getObserverParams", "format.f1.header", "colsname")
>>> assert obj.getObserverParam("getObserverParams", "format.f1.header") == "colsname"
>>> assert obj.getObserverParams("export.test.fake") == ["format.f1.header"]
>>> obj.setObserverParam("getObserverParams", "format.f1.maxwidth", "50")
>>> assert obj.getObserverParams("export.test.fake") == ["format.f1.header", "format.f1.maxwidth"]
>>> obj.removeObserverParam("export.test.fake", "format.f1.header")
>>> assert obj.getObserverParams("export.test.fake") == ["format.f1.maxwidth"]


--------------------------------------------------------------------------------
 - getUnitsClasses/getUnitsIDs
 - addUnit/removeUnit/clearAllUnits
>>> obj = PyOpenFLUID()
>>> assert len(obj.getUnitsClasses()) == 0
>>> obj.addUnit("SU", 1, 1)
>>> assert obj.getUnitsClasses() == ["SU"]
>>> assert obj.getUnitsIDs("SU") == [1]
>>> obj.addUnit("SU", 2, 1)
>>> assert obj.getUnitsClasses() == ["SU"]
>>> assert obj.getUnitsIDs("SU") == [1, 2]
>>> obj.addUnit("WQ", 1, 1)
>>> assert obj.getUnitsClasses() == ["SU", "WQ"]
>>> assert obj.getUnitsIDs("WQ") == [1]
>>> obj.removeUnit("SU", 1)
>>> assert obj.getUnitsClasses() == ["SU", "WQ"]
>>> assert obj.getUnitsIDs("SU") == [2]
>>> obj.clearAllUnits("SU")
>>> assert obj.getUnitsClasses() == ["WQ"]


--------------------------------------------------------------------------------
 - createAttribute/getAttribute/setAttribute/removeAttribute
>>> obj = PyOpenFLUID()
>>> obj.addUnit("SU", 1, 1)
>>> obj.addUnit("SU", 2, 1)
>>> obj.createAttribute("SU", "area", "1.0")
>>> assert obj.getAttribute("SU", 1, "area") == "1.0"
>>> assert obj.getAttribute("SU", 2, "area") == "1.0"
>>> obj.setAttribute("SU", 1, "area", "162")
>>> assert obj.getAttribute("SU", 1, "area") == "162"
>>> assert obj.getAttribute("SU", 2, "area") == "1.0"
>>> obj.removeAttribute("SU", "area")
>>> assert obj.getAttribute("SU", 1, "area") is None
>>> assert obj.getAttribute("SU", 2, "area") is None


--------------------------------------------------------------------------------
 - addParentChildConnection/removeParentChildConnection/getUnitChildren/getUnitParents
>>> obj = PyOpenFLUID()
>>> obj.addUnit("SU", 1, 1)
>>> obj.addUnit("SU", 2, 1)
>>> assert len(obj.getUnitParents("SU", 1)) == 0
>>> assert len(obj.getUnitParents("SU", 2)) == 0
>>> assert len(obj.getUnitChildren("SU", 1)) == 0
>>> assert len(obj.getUnitChildren("SU", 2)) == 0
>>> obj.addParentChildConnection("SU", 1, "SU", 2)
>>> assert len(obj.getUnitParents("SU", 1)) == 0
>>> assert obj.getUnitParents("SU", 2) == [("SU", 1)]
>>> assert obj.getUnitChildren("SU", 1) == [("SU", 2)]
>>> assert len(obj.getUnitChildren("SU", 2)) == 0
>>> obj.removeParentChildConnection("SU", 1, "SU", 2)
>>> assert len(obj.getUnitParents("SU", 2)) == 0
>>> assert len(obj.getUnitChildren("SU", 1)) == 0


--------------------------------------------------------------------------------
 - addFromToConnection/removeFromToConnection/getUnitFroms/getUnitTos
>>> obj = PyOpenFLUID()
>>> obj.addUnit("SU", 1, 1)
>>> obj.addUnit("SU", 2, 1)
>>> assert len(obj.getUnitFroms("SU", 1)) == 0
>>> assert len(obj.getUnitFroms("SU", 2)) == 0
>>> assert len(obj.getUnitTos("SU", 1)) == 0
>>> assert len(obj.getUnitTos("SU", 2)) == 0
>>> obj.addFromToConnection("SU", 1, "SU", 2)
>>> assert len(obj.getUnitFroms("SU", 1)) == 0
>>> assert obj.getUnitFroms("SU", 2) == [("SU", 1)]
>>> assert obj.getUnitTos("SU", 1) == [("SU", 2)]
>>> assert len(obj.getUnitTos("SU", 2)) == 0
>>> obj.removeFromToConnection("SU", 1, "SU", 2)
>>> assert len(obj.getUnitFroms("SU", 2)) == 0
>>> assert len(obj.getUnitTos("SU", 1)) == 0


--------------------------------------------------------------------------------
 - getProcessOrder/setProcessOrder
>>> obj = PyOpenFLUID()
>>> obj.addUnit("SU", 1, 1)
>>> assert obj.getProcessOrder("SU", 1) == 1
>>> obj.setProcessOrder("SU", 1, 5)
>>> assert obj.getProcessOrder("SU", 1) == 5


--------------------------------------------------------------------------------
 - openDataset
>>> obj = PyOpenFLUID()
>>> obj.openDataset("/path/to/dataset")


--------------------------------------------------------------------------------
 - openProject
>>> obj = PyOpenFLUID()
>>> obj.openProject("/path/to/project")


--------------------------------------------------------------------------------
 - saveDataset
>>> obj = PyOpenFLUID()
>>> ... # configure the simulation
>>> obj.saveDataset("/path/to/dataset")


--------------------------------------------------------------------------------
 - saveProject
>>> obj = PyOpenFLUID()
>>> ... # configure the simulation
>>> obj.saveProject("/path/to/project")


--------------------------------------------------------------------------------
 - getCurrentOutputDir/setCurrentOutputDir
>>> obj = PyOpenFLUID()
>>> obj.setCurrentOutputDir("/path/to/output")
>>> assert obj.getCurrentOutputDir() == "/path/to/output"


--------------------------------------------------------------------------------
 - constructor
>>> obj = PyOpenFLUID()


--------------------------------------------------------------------------------
 - getModelItems
>>> obj = PyOpenFLUID()
>>> obj.addSimulator("examples.primitives.unitsA.prod")
>>> obj.addSimulator("examples.primitives.unitsB.prod")
>>> obj.addSimulator("examples.primitives.unitsA.up")
>>> print obj.getModelItems()
["examples.primitives.unitsA.prod", "examples.primitives.unitsB.prod", "examples.primitives.unitsA.up"]


--------------------------------------------------------------------------------
 - addCSVOutput/loadCSVOutput
>>> obj = PyOpenFLUID()
>>> obj.openProject("some_project")
>>> obs = obj.addCSVOutput("unitsA", "*", "1;2;3")
>>> obj.runSimulation()
 True 
>>> Res = obj.loadCSVOutput(obs, "unitsA", "1;2", "*")
>>> assert len(Res) == 2


